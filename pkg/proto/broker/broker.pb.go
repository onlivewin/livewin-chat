// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: broker/broker.proto

package broker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Proto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body []byte `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *Proto) Reset() {
	*x = Proto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_broker_broker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proto) ProtoMessage() {}

func (x *Proto) ProtoReflect() protoreflect.Message {
	mi := &file_broker_broker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proto.ProtoReflect.Descriptor instead.
func (*Proto) Descriptor() ([]byte, []int) {
	return file_broker_broker_proto_rawDescGZIP(), []int{0}
}

func (x *Proto) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type BroadcastReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proto *Proto `protobuf:"bytes,1,opt,name=proto,proto3" json:"proto,omitempty"`
}

func (x *BroadcastReq) Reset() {
	*x = BroadcastReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_broker_broker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastReq) ProtoMessage() {}

func (x *BroadcastReq) ProtoReflect() protoreflect.Message {
	mi := &file_broker_broker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastReq.ProtoReflect.Descriptor instead.
func (*BroadcastReq) Descriptor() ([]byte, []int) {
	return file_broker_broker_proto_rawDescGZIP(), []int{1}
}

func (x *BroadcastReq) GetProto() *Proto {
	if x != nil {
		return x.Proto
	}
	return nil
}

type BroadcastReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BroadcastReply) Reset() {
	*x = BroadcastReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_broker_broker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastReply) ProtoMessage() {}

func (x *BroadcastReply) ProtoReflect() protoreflect.Message {
	mi := &file_broker_broker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastReply.ProtoReflect.Descriptor instead.
func (*BroadcastReply) Descriptor() ([]byte, []int) {
	return file_broker_broker_proto_rawDescGZIP(), []int{2}
}

type BroadcastChannelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelID string `protobuf:"bytes,1,opt,name=channelID,proto3" json:"channelID,omitempty"`
	Proto     *Proto `protobuf:"bytes,2,opt,name=proto,proto3" json:"proto,omitempty"`
}

func (x *BroadcastChannelReq) Reset() {
	*x = BroadcastChannelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_broker_broker_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastChannelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastChannelReq) ProtoMessage() {}

func (x *BroadcastChannelReq) ProtoReflect() protoreflect.Message {
	mi := &file_broker_broker_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastChannelReq.ProtoReflect.Descriptor instead.
func (*BroadcastChannelReq) Descriptor() ([]byte, []int) {
	return file_broker_broker_proto_rawDescGZIP(), []int{3}
}

func (x *BroadcastChannelReq) GetChannelID() string {
	if x != nil {
		return x.ChannelID
	}
	return ""
}

func (x *BroadcastChannelReq) GetProto() *Proto {
	if x != nil {
		return x.Proto
	}
	return nil
}

type BroadcastChannelReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BroadcastChannelReply) Reset() {
	*x = BroadcastChannelReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_broker_broker_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastChannelReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastChannelReply) ProtoMessage() {}

func (x *BroadcastChannelReply) ProtoReflect() protoreflect.Message {
	mi := &file_broker_broker_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastChannelReply.ProtoReflect.Descriptor instead.
func (*BroadcastChannelReply) Descriptor() ([]byte, []int) {
	return file_broker_broker_proto_rawDescGZIP(), []int{4}
}

type ChannelsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChannelsReq) Reset() {
	*x = ChannelsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_broker_broker_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelsReq) ProtoMessage() {}

func (x *ChannelsReq) ProtoReflect() protoreflect.Message {
	mi := &file_broker_broker_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelsReq.ProtoReflect.Descriptor instead.
func (*ChannelsReq) Descriptor() ([]byte, []int) {
	return file_broker_broker_proto_rawDescGZIP(), []int{5}
}

type ChannelsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channels []string `protobuf:"bytes,1,rep,name=channels,proto3" json:"channels,omitempty"`
}

func (x *ChannelsReply) Reset() {
	*x = ChannelsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_broker_broker_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelsReply) ProtoMessage() {}

func (x *ChannelsReply) ProtoReflect() protoreflect.Message {
	mi := &file_broker_broker_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelsReply.ProtoReflect.Descriptor instead.
func (*ChannelsReply) Descriptor() ([]byte, []int) {
	return file_broker_broker_proto_rawDescGZIP(), []int{6}
}

func (x *ChannelsReply) GetChannels() []string {
	if x != nil {
		return x.Channels
	}
	return nil
}

var File_broker_broker_proto protoreflect.FileDescriptor

var file_broker_broker_proto_rawDesc = []byte{
	0x0a, 0x13, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x68, 0x61, 0x69, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x72,
	0x62, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x22, 0x1b, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x3e, 0x0a, 0x0c, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x69, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x72,
	0x62, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x10, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x63, 0x0a, 0x13, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x05,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61,
	0x69, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x72, 0x62, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x17, 0x0a, 0x15,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x0d, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x22, 0x2b, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x32, 0x8d, 0x02, 0x0a, 0x06, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x09,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x68, 0x61, 0x69, 0x72,
	0x79, 0x5f, 0x63, 0x61, 0x72, 0x62, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x68, 0x61, 0x69,
	0x72, 0x79, 0x5f, 0x63, 0x61, 0x72, 0x62, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x64, 0x0a,
	0x10, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x26, 0x2e, 0x68, 0x61, 0x69, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x72, 0x62, 0x2e, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x68, 0x61, 0x69, 0x72,
	0x79, 0x5f, 0x63, 0x61, 0x72, 0x62, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x4c, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12,
	0x1e, 0x2e, 0x68, 0x61, 0x69, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x72, 0x62, 0x2e, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x20, 0x2e, 0x68, 0x61, 0x69, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x72, 0x62, 0x2e, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x77, 0x69, 0x64, 0x61, 0x54, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x77, 0x69, 0x6e, 0x2d, 0x63, 0x68,
	0x61, 0x74, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x3b, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_broker_broker_proto_rawDescOnce sync.Once
	file_broker_broker_proto_rawDescData = file_broker_broker_proto_rawDesc
)

func file_broker_broker_proto_rawDescGZIP() []byte {
	file_broker_broker_proto_rawDescOnce.Do(func() {
		file_broker_broker_proto_rawDescData = protoimpl.X.CompressGZIP(file_broker_broker_proto_rawDescData)
	})
	return file_broker_broker_proto_rawDescData
}

var file_broker_broker_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_broker_broker_proto_goTypes = []interface{}{
	(*Proto)(nil),                 // 0: hairy_carb.broker.Proto
	(*BroadcastReq)(nil),          // 1: hairy_carb.broker.BroadcastReq
	(*BroadcastReply)(nil),        // 2: hairy_carb.broker.BroadcastReply
	(*BroadcastChannelReq)(nil),   // 3: hairy_carb.broker.BroadcastChannelReq
	(*BroadcastChannelReply)(nil), // 4: hairy_carb.broker.BroadcastChannelReply
	(*ChannelsReq)(nil),           // 5: hairy_carb.broker.ChannelsReq
	(*ChannelsReply)(nil),         // 6: hairy_carb.broker.ChannelsReply
}
var file_broker_broker_proto_depIdxs = []int32{
	0, // 0: hairy_carb.broker.BroadcastReq.proto:type_name -> hairy_carb.broker.Proto
	0, // 1: hairy_carb.broker.BroadcastChannelReq.proto:type_name -> hairy_carb.broker.Proto
	1, // 2: hairy_carb.broker.Broker.Broadcast:input_type -> hairy_carb.broker.BroadcastReq
	3, // 3: hairy_carb.broker.Broker.BroadcastInGroup:input_type -> hairy_carb.broker.BroadcastChannelReq
	5, // 4: hairy_carb.broker.Broker.Channels:input_type -> hairy_carb.broker.ChannelsReq
	2, // 5: hairy_carb.broker.Broker.Broadcast:output_type -> hairy_carb.broker.BroadcastReply
	4, // 6: hairy_carb.broker.Broker.BroadcastInGroup:output_type -> hairy_carb.broker.BroadcastChannelReply
	6, // 7: hairy_carb.broker.Broker.Channels:output_type -> hairy_carb.broker.ChannelsReply
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_broker_broker_proto_init() }
func file_broker_broker_proto_init() {
	if File_broker_broker_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_broker_broker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_broker_broker_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_broker_broker_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_broker_broker_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastChannelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_broker_broker_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastChannelReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_broker_broker_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_broker_broker_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_broker_broker_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_broker_broker_proto_goTypes,
		DependencyIndexes: file_broker_broker_proto_depIdxs,
		MessageInfos:      file_broker_broker_proto_msgTypes,
	}.Build()
	File_broker_broker_proto = out.File
	file_broker_broker_proto_rawDesc = nil
	file_broker_broker_proto_goTypes = nil
	file_broker_broker_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BrokerClient is the client API for Broker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BrokerClient interface {
	//rpc PushMsg(PushMsgReq) returns (PushMsgReply);
	Broadcast(ctx context.Context, in *BroadcastReq, opts ...grpc.CallOption) (*BroadcastReply, error)
	BroadcastInGroup(ctx context.Context, in *BroadcastChannelReq, opts ...grpc.CallOption) (*BroadcastChannelReply, error)
	Channels(ctx context.Context, in *ChannelsReq, opts ...grpc.CallOption) (*ChannelsReply, error)
}

type brokerClient struct {
	cc grpc.ClientConnInterface
}

func NewBrokerClient(cc grpc.ClientConnInterface) BrokerClient {
	return &brokerClient{cc}
}

func (c *brokerClient) Broadcast(ctx context.Context, in *BroadcastReq, opts ...grpc.CallOption) (*BroadcastReply, error) {
	out := new(BroadcastReply)
	err := c.cc.Invoke(ctx, "/hairy_carb.broker.Broker/Broadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerClient) BroadcastInGroup(ctx context.Context, in *BroadcastChannelReq, opts ...grpc.CallOption) (*BroadcastChannelReply, error) {
	out := new(BroadcastChannelReply)
	err := c.cc.Invoke(ctx, "/hairy_carb.broker.Broker/BroadcastInGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerClient) Channels(ctx context.Context, in *ChannelsReq, opts ...grpc.CallOption) (*ChannelsReply, error) {
	out := new(ChannelsReply)
	err := c.cc.Invoke(ctx, "/hairy_carb.broker.Broker/Channels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrokerServer is the server API for Broker service.
type BrokerServer interface {
	//rpc PushMsg(PushMsgReq) returns (PushMsgReply);
	Broadcast(context.Context, *BroadcastReq) (*BroadcastReply, error)
	BroadcastInGroup(context.Context, *BroadcastChannelReq) (*BroadcastChannelReply, error)
	Channels(context.Context, *ChannelsReq) (*ChannelsReply, error)
}

// UnimplementedBrokerServer can be embedded to have forward compatible implementations.
type UnimplementedBrokerServer struct {
}

func (*UnimplementedBrokerServer) Broadcast(context.Context, *BroadcastReq) (*BroadcastReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (*UnimplementedBrokerServer) BroadcastInGroup(context.Context, *BroadcastChannelReq) (*BroadcastChannelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastInGroup not implemented")
}
func (*UnimplementedBrokerServer) Channels(context.Context, *ChannelsReq) (*ChannelsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Channels not implemented")
}

func RegisterBrokerServer(s *grpc.Server, srv BrokerServer) {
	s.RegisterService(&_Broker_serviceDesc, srv)
}

func _Broker_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hairy_carb.broker.Broker/Broadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).Broadcast(ctx, req.(*BroadcastReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broker_BroadcastInGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).BroadcastInGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hairy_carb.broker.Broker/BroadcastInGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).BroadcastInGroup(ctx, req.(*BroadcastChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broker_Channels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).Channels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hairy_carb.broker.Broker/Channels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).Channels(ctx, req.(*ChannelsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Broker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hairy_carb.broker.Broker",
	HandlerType: (*BrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Broadcast",
			Handler:    _Broker_Broadcast_Handler,
		},
		{
			MethodName: "BroadcastInGroup",
			Handler:    _Broker_BroadcastInGroup_Handler,
		},
		{
			MethodName: "Channels",
			Handler:    _Broker_Channels_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "broker/broker.proto",
}
